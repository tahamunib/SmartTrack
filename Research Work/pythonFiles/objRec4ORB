import cv2

import numpy as np
from matplotlib import pyplot as plt



# -------- camShift iteration function start --------------

def func(roi_histogram,roiBox,term_criteria,roi):
    print 'in function '
    #cv2.imshow('roi',ROIHsv)
    global breakStatus,orb,kp1,desc1
    fgbg = cv2.createBackgroundSubtractorMOG2()
    
    while(cap.isOpened()):
        
                
                ret,frame = cap.read()
                if ret == True:
                    fgmask = fgbg.apply(frame)
                    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
                    frameGray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
                    hsvforCamshift = cv2.GaussianBlur(hsv,(15,15),0)
                    kernel = np.ones((11,11),np.uint8)
                    hsvforCamshift = cv2.erode(hsvforCamshift,kernel,iterations=1)
                    hsvforCamshift = cv2.dilate(hsvforCamshift,kernel,iterations=1)

                    hsvforCamshift = cv2.dilate(hsvforCamshift,kernel,iterations=1)
                    hsvforCamshift = cv2.erode(hsvforCamshift,kernel,iterations=1)
                    
                    
                    
                    backProj = cv2.calcBackProject([hsvforCamshift],[0],roi_histogram,[0,180],1)
                    retval, threshold = cv2.threshold(backProj, 40, 255, cv2.THRESH_BINARY)
                    backProj = cv2.normalize(threshold,threshold,0,255,cv2.NORM_MINMAX)
                    
                    #cv2.waitKey(60)
                    
                    print roiBox
                    ret, roiBox = cv2.CamShift(backProj, roiBox, term_criteria)
                    
                    # Draw it on image
                    pts = cv2.boxPoints(ret)
                    pts = np.int0(pts)
##                    print "Points from camshift:"
##                    print pts
##                    print "-----"
                    img2 = cv2.polylines(frame,[pts],True, 255,2)
                    #print pts
                    pts = np.array(pts)
                    #print param
                    s = pts.sum(axis = 1)
                    tl = pts[np.argmin(s)]
                    br = pts[np.argmax(s)]
                    
                    diff = np.diff(pts,axis=1)
                    tr = pts[np.argmin(diff)]
                    bl = pts[np.argmax(diff)]

                    
                    
                    first = (tl[0],tl[1])
                    second = (tr[0],tr[1])
                    third = (br[0],br[1])
                    fourth = (bl[0],bl[1])
                    #cv2.imshow('Test',img2[tl[1]:br[1],tl[0]:br[0]])

                    if tl[0] < 0:
                        tl[0] = 0
                    if tl[1] < 0:
                        tl[1] = 0

                    
                    curr = img2.copy()
                    currWithoutLines = img2.copy()
                    pieceDetectedbyCamShift = img2[tl[1]:br[1],tl[0]:br[0]]
                    img2 = cv2.GaussianBlur(pieceDetectedbyCamShift,(21,21),4)
                    curr[tl[1]:br[1],tl[0]:br[0]] = img2

##                    cv2.imshow('Testing',pieceDetectedbyCamShift)

                    
                    
                    print br[1]-tl[1]
                    if br[1]-tl[1] > 0:
                        if np.count_nonzero(pts) > 4:

                            print pts                            
                            
                            cv2.imshow('img2',curr)
                            cv2.imshow('BackProj',backProj)
                            p = cv2.waitKey(60) & 0xFF
                            if p == ord('q'):
                                breakStatus = False
                                break
                            if p == ord('c'):
                                cv2.imshow('Captured Match',img3)
                        else:
                            #----------------------#
                            kp1,desc1 = orb.detectAndCompute(roi,None)
                            pieceDetectedbyCamShift = cv2.cvtColor(pieceDetectedbyCamShift,cv2.COLOR_BGR2GRAY)
                            kp2,desc2 = orb.detectAndCompute(pieceDetectedbyCamShift,None)

                        

                            bf = cv2.BFMatcher(cv2.NORM_L2,crossCheck=True)
                            
                            matches = bf.match(desc1,desc2)
        ##                    matches = sorted(matches,key=lambda x:x.distance)
                            matchesMask = [[0,0] for i in xrange(len(matches))]

                            good=[]


                            for i in range(0,len(matches)-1):
                                
                                if i < len(matches):
                                    if matches[i].distance < 0.6*(matches[i+1].distance):
                                        good.append(matches[i])
                                else:
                                    break

                            MIN_MATCH_COUNT=6
                            if len(good)>MIN_MATCH_COUNT:
                                src_pts = np.float32([ kp1[m.queryIdx].pt for m in good ]).reshape(-1,1,2)
                                dst_pts = np.float32([ kp2[m.trainIdx].pt for m in good ]).reshape(-1,1,2)

                                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                                matchesMask = mask.ravel().tolist()
                                
                                h,w = roi.shape
                                pts = np.float32([ [0,0],[0,h-1],[w-1,h-1],[w-1,0] ]).reshape(-1,1,2)
                                dst = cv2.perspectiveTransform(pts,M)

        ##                        img2 = cv2.polylines(frame,[np.int32(dst)],True,255,3, cv2.LINE_AA)

                            else:
                                print "Not enough matches are found - %d/%d" % (len(good),MIN_MATCH_COUNT)
                                matchesMask = None


                            draw_params = dict(matchColor = (0,255,0),singlePointColor = None,matchesMask = matchesMask, flags = 2)
                            
                            img3 = cv2.drawMatches(roi,kp1,pieceDetectedbyCamShift,kp2,good,None,**draw_params)
    ##                        img3 = cv2.drawMatches(ROI,kp1,frame,kp2,matches,None, flags=2)
                            cv2.imshow('BF Matcher',img3)
                            #----------------------#
                            cv2.imshow('img2',currWithoutLines)
                            cv2.imshow('BackProj',backProj)
                            p = cv2.waitKey(60) & 0xFF
                            if p == ord('q'):
                                breakStatus = True
                                break
                        
                        
                        
                else:
                    cv2.destroyAllWindows()
                    cap.release()
                    
                    


                    # ------------- camShift Iteration function End ---------

# --------- objSelect function Start ---------
    
def objSelect(event,x,y,flags,param):
    
    global originalCap,originalCap2, ROI,ROIHsv, roiPts, roiBox,orb,kp1,desc1
    if event == cv2.EVENT_LBUTTONDOWN and len(roiPts) < 2:
        
        roiPts.append((x,y))
        cv2.circle(originalCap,(x,y),4,(0,255,0),2)
        
        cv2.imshow('Captured',originalCap)

    if event == cv2.EVENT_MOUSEMOVE and len(roiPts) == 2:
        cv2.destroyWindow('Captured')
        
        
        roiPts = np.array(roiPts)
        #print param
        s = roiPts.sum(axis = 1)
        tl = roiPts[np.argmin(s)]
        br = roiPts[np.argmax(s)]

        diff = np.diff(roiPts,axis=1)
        tr = roiPts[np.argmin(diff)]
        bl = roiPts[np.argmax(diff)]

        
        
        first = (tl[0],tl[1])
        second = (tr[0],tr[1])
        third = (br[0],br[1])
        fourth = (bl[0],bl[1])
 
        cv2.rectangle(originalCap,first,third,(0,255,0),2)
        
        #cv2.line(originalCap,first,second,(0,255,0),3)
        #cv2.line(originalCap,second,third,(0,255,0),3)
        #cv2.line(originalCap,third,fourth,(0,255,0),3)
        #cv2.line(originalCap,fourth,first,(0,255,0),3)

        ROI = originalCap[tl[1]:br[1],tl[0]:br[0]]
        
        roiBox = (tl[0],tl[1],br[0],br[1])    
        ROIHsv = cv2.cvtColor(ROI,cv2.COLOR_BGR2GRAY)
        #print originalCap
        #cv2.ocl.setUseOpenCL(False)
        orb = cv2.xfeatures2d.SIFT_create()
        kp1,desc1 = orb.detectAndCompute(ROIHsv,None)
        
        #ROIhsv = cv2.drawKeypoints(ROIHsv,kp1,ROIHsv,color=(0,0,255),flags=0)
        
        #cv2.imshow('Captured',ROI)

        # -------- objSelect Function End -----------------


# --------- Code Start ---------

cap = cv2.VideoCapture(0)



while(cap.isOpened()):
    ret,frame = cap.read()
    
    
    cv2.imshow('Frame',frame)
    k = cv2.waitKey(60) & 0xFF
    if k == ord('q'):
        
        break
    elif k == ord('c'):
        
        originalCap = None
        originalCap = frame.copy()
        originalCap2 = frame.copy()
        
        
        cv2.imshow('Captured',originalCap)
        roiPts=[]
        cv2.setMouseCallback('Captured',objSelect)

cv2.destroyWindow('Frame')


##try:
if len(roiPts) == 2:
            hsv_roi = cv2.cvtColor(ROI,cv2.COLOR_BGR2HSV)
            gray_roi = cv2.cvtColor(ROI,cv2.COLOR_BGR2GRAY)
            #print hsv_roi
            mask = cv2.inRange(hsv_roi,np.array((0.,60.,32.)),np.array((255.,255.,180.)))
            #cv2.imshow('Mask',mask)
            roi_hist = cv2.calcHist([hsv_roi],[0],mask,[180],[0,180])
            roi_hist = cv2.normalize(roi_hist,roi_hist,0,255,cv2.NORM_MINMAX)
            backProj = cv2.calcBackProject([hsv_roi],[0],roi_hist,[0,180],1)
            #cv2.imshow('BackProjOriginal',backProj)
            roi_hist = roi_hist.reshape(-1)
            #plt.plot(roi_hist),plt.show()            
            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT ,10,1)
            
            func(roi_hist,roiBox,term_crit,gray_roi)
        
##except NameError:
##    print 'Error'
try:
    if breakStatus == True:
        func(roi_hist,roiBox,term_crit)
    else:
        cv2.destroyAllWindows()
        
        
except:
    print 'Closing Error'

cap.release()

